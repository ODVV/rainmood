{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","musicId","onSelectChange","event","_this","setState","target","value","refs","audio","pause","load","play","_this2","this","addEventListener","parseInt","toString","react_default","a","createElement","className","src","process","alt","style","color","fontSize","onChange","split","map","e","i","key","val","href","rel","autoPlay","loop","ref","concat","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAmFeA,oNA5EbC,MAAQ,CACNC,QAAS,OAGXC,eAAiB,SAACC,GAChBC,EAAKC,SAAS,CACZJ,QAASE,EAAMG,OAAOC,OACrB,WACDH,EAAKI,KAAKC,MAAMC,QAChBN,EAAKI,KAAKC,MAAME,OAChBP,EAAKI,KAAKC,MAAMG,6FAIA,IAAAC,EAAAC,KAClBA,KAAKN,KAAKC,MAAMM,iBAAiB,QAAS,WACxCF,EAAKR,SAAS,CACZJ,UAAWe,SAASH,EAAKb,MAAMC,SAAW,GAAK,IAAIgB,YAClD,WACDJ,EAAKL,KAAKC,MAAME,OAChBE,EAAKL,KAAKC,MAAMG,4CAKb,IACAX,EAAWa,KAAKd,MAAhBC,QAGP,OACEiB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,wBAAyCF,UAAU,WAAWG,IAAI,SAC5EN,EAAAC,EAAAC,cAAA,sCAGAF,EAAAC,EAAAC,cAAA,QAAMK,MAAO,CACXC,MAAO,OACPC,SAAU,WAFZ,iIAKET,EAAAC,EAAAC,cAAA,WALF,iCAOEF,EAAAC,EAAAC,cAAA,UAAQb,MAAON,EAAS2B,SAAUd,KAAKZ,gBA/C9B,aAgDO2B,MAAM,IAAIC,IAAI,SAACC,EAAGC,GAC9B,OACEd,EAAAC,EAAAC,cAAA,UAAQa,IAAKD,EAAGE,IAAKF,GAAKA,MAVlC,uBAeEd,EAAAC,EAAAC,cAAA,KACEC,UAAU,WACVc,KAxDM,yCAyDN7B,OAAO,SACP8B,IAAI,uBAJN,YAWJlB,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,SAAOiB,UAAQ,EAACC,MAAI,GAClBpB,EAAAC,EAAAC,cAAA,UAAQE,IAAKC,8BAGfL,EAAAC,EAAAC,cAAA,SAAOiB,UAAQ,EAACE,IAAI,SAClBrB,EAAAC,EAAAC,cAAA,UAAQE,IAAG,GAAAkB,OAAKjB,YAAL,WAAAiB,OAAqCvC,EAArC,KAAAuC,OAA4D,MAAZvC,EAAkB,MAAQ,mBArE/EwC,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.315da86b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst NUMBER_CONST = '0123456789';\nconst REPO_GITHUB = \"https://github.com/hijiangtao/rainmood\";\n\nclass App extends Component {\n  state = {\n    musicId: '0',\n  }\n\n  onSelectChange = (event) => {\n    this.setState({\n      musicId: event.target.value,\n    }, () => {\n      this.refs.audio.pause();\n      this.refs.audio.load();\n      this.refs.audio.play();\n    })\n  }\n\n  componentDidMount() {\n    this.refs.audio.addEventListener(\"ended\", () => {\n      this.setState({\n        musicId: ((parseInt(this.state.musicId) + 1) % 10).toString(),\n      }, () => {\n        this.refs.audio.load();\n        this.refs.audio.play();\n      });\n    });\n  }\n\n  render() {\n    const {musicId} = this.state;\n    // console.log(`${process.env.PUBLIC_URL}/music/${musicId}.mp3`)\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={process.env.PUBLIC_URL + '/favicon.png'} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            倾听 专注  \n          </p>\n          <span style={{\n            color: '#666',\n            fontSize: '0.8rem',\n          }}>\n            循环播放十首电影原声精选，背景乐为下雨声。\n            <br/>\n            切换音乐▷\n            <select value={musicId} onChange={this.onSelectChange}>\n              {NUMBER_CONST.split('').map((e, i) => {\n                return (\n                  <option key={i} val={i} >{i}</option>\n                )\n              })}\n            </select>\n            &nbsp;详见&nbsp;\n            <a\n              className=\"App-link\"\n              href={REPO_GITHUB}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              GitHub\n            </a>\n          </span>\n        </header>\n\n        <footer>\n          <audio autoPlay loop>\n            <source src={process.env.PUBLIC_URL + \"/music/main.m4a\"} />\n          </audio>\n\n          <audio autoPlay ref=\"audio\">\n            <source src={`${process.env.PUBLIC_URL}/music/${musicId}.${musicId === '5' ? 'm4a' : 'mp3'}`} /> \n          </audio>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}