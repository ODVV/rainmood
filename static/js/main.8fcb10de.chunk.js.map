{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["CONSTANTS","title","description","github","musicStrList","changeMusicTitle","App","state","musicId","musicLoopFlag","logoClassSubfixName","bgAudioVolume","musicAudioVolume","onSelectChange","event","_this","setState","target","value","refs","musicAudioRef","pause","load","play","onLoopChange","prevState","Object","objectSpread","setVolume","type","volume","defineProperty","concat","forceMusicChange","_ref","ignoreLoop","parseInt","toString","setTimeout","this","addEventListener","_this$state","react_default","a","createElement","className","onClick","htmlFor","id","min","max","step","onChange","split","map","e","i","key","val","name","checked","href","rel","autoPlay","ref","loop","src","process","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8fcb10de.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst CONSTANTS = {\n  title: '倾听 专注',\n  description: '循环播放十首电影原声精选，背景乐为下雨声。',\n  github: 'https://github.com/hijiangtao/rainmood',\n  musicStrList: '0123456789',\n  changeMusicTitle: '手动切歌'\n}\n\nclass App extends Component {\n  state = {\n    musicId: '0',\n    musicLoopFlag: false,\n    logoClassSubfixName: 'static', // 'static', 'switch'\n    bgAudioVolume: 1,\n    musicAudioVolume: 1\n  }\n\n  onSelectChange = (event) => {\n    this.setState({\n      musicId: event.target.value,\n    }, () => {\n      this.refs.musicAudioRef.pause();\n      this.refs.musicAudioRef.load();\n      this.refs.musicAudioRef.play();\n    });\n  }\n\n  onLoopChange = () => {\n    this.setState((prevState) => {\n      return {\n        ...prevState,\n        musicLoopFlag: !prevState.musicLoopFlag,\n      }\n    })\n  }\n\n  setVolume = (type) => {\n    return (event) => {\n      const volume = event.target.value;\n      this.setState({\n        [`${type}Volume`]: volume,\n      });\n      this.refs[`${type}Ref`].volume = volume;\n    }\n  }\n\n  /**\n   * ignoreLoop 用于忽略 musicLoop 状态使用\n   */\n  forceMusicChange = ({ ignoreLoop }) => {\n    if (this.state.musicLoopFlag && !ignoreLoop) {\n      return () => { };\n    } else {\n      return () => {\n        this.setState({\n          musicId: ((parseInt(this.state.musicId) + 1) % 10).toString(),\n          logoClassSubfixName: 'switch',\n        }, () => {\n          this.refs.musicAudioRef.load();\n          this.refs.musicAudioRef.play();\n        });\n\n        setTimeout(() => {\n          this.setState({\n            logoClassSubfixName: 'static',\n          })\n        }, 1000);\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.refs.musicAudioRef.addEventListener(\"ended\", this.forceMusicChange({ ignoreLoop: false }));\n  }\n\n  render() {\n    const { musicId, musicLoopFlag, bgAudioVolume, musicAudioVolume } = this.state;\n\n    return (\n      <div className=\"App\">\n        <section className=\"App-header\">\n          <div\n            className={`App-logo-${this.state.logoClassSubfixName}`}\n            onClick={this.forceMusicChange({ ignoreLoop: true })}\n          />\n          <p>{CONSTANTS.title}</p>\n          <div className=\"inputContainer\">\n            <label className=\"mr5\" htmlFor=\"bgVolumeInput\">雨声</label>\n            <input\n              id=\"bgVolumeInput\"\n              type=\"range\"\n              min=\"0\"\n              max=\"1\"\n              step=\"0.01\"\n              value={bgAudioVolume}\n              onChange={this.setVolume('bgAudio')}\n            />\n          </div>\n          <div className=\"inputContainer\">\n            <label className=\"mr5\" htmlFor=\"musicVolumeInput\">音乐</label>\n            <input\n              id=\"musicVolumeInput\"\n              type=\"range\"\n              min=\"0\"\n              max=\"1\"\n              step=\"0.01\"\n              value={musicAudioVolume}\n              onChange={this.setVolume('musicAudio')}\n            />\n          </div>\n          <div className=\"inputContainer\">\n            <label className=\"mr5\" >{CONSTANTS.changeMusicTitle}</label>\n            <select className=\"mr5\" value={musicId} onChange={this.onSelectChange}>\n              {CONSTANTS.musicStrList.split('').map((e, i) => {\n                return (\n                  <option key={i} val={i} >{i}</option>\n                )\n              })}\n            </select>\n\n            <span className=\"mr5\">|</span>\n          {/* </div>\n          <div className=\"inputContainer\"> */}\n            <input\n              type=\"checkbox\"\n              id=\"musicLoopInput\"\n              name=\"musicLoopInput\"\n              checked={musicLoopFlag}\n              onChange={this.onLoopChange}\n            />\n            <label htmlFor=\"musicLoopInput\">单曲循环</label>\n          </div>\n\n          <span>\n            {CONSTANTS.description}\n            <br />\n            &nbsp;详见&nbsp;\n            <a\n              className=\"App-link\"\n              href={CONSTANTS.github}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              GitHub\n            </a>\n          </span>\n        </section>\n\n        <footer>\n          <audio autoPlay ref=\"bgAudioRef\" loop>\n            <source src={process.env.PUBLIC_URL + \"/music/main.m4a\"} />\n          </audio>\n\n          <audio autoPlay ref=\"musicAudioRef\">\n            <source src={`${process.env.PUBLIC_URL}/music/${musicId}.${musicId === '5' ? 'm4a' : 'mp3'}`} />\n          </audio>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}